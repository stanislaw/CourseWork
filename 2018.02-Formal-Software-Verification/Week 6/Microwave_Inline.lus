-- 4.  In the material used for this topic, there is an example of a Microwave.
-- Below is the code. To refresh your memory, we never want to get to a state
-- where the door is open and the heat is on. The developer claims to have fixed
-- the defect discovered by the model checking. His fix is reflected in the code
-- below. Perform modeling checking on the code again.

type action_t = enum { OpenDoor, CloseDoor, TurnHeatOn, TurnHeatOff };
type door_t = enum { Opened, Closed };
type heat_t = enum { On, Off };

node top (action: action_t) returns ()
var cur_door: door_t;
var cur_heat: heat_t;
let
  (cur_door, cur_heat) =
    (Closed, Off) ->
      if action = OpenDoor then
        if not (pre cur_door = Opened) then
          -- to fix the model:
          -- - comment out "(Opened, cur_heat)"
          -- - uncomment the following if..else:
          (Opened, pre cur_heat)

          -- the fix:
          -- if cur_heat = On then
          --  (Opened, Off)
          -- else
          -- (Opened, cur_heat)

        else
          (pre cur_door, pre cur_heat)

      else if action = CloseDoor then
        if pre cur_door = Opened then
          (Closed, pre cur_heat)
        else
          (pre cur_door, pre cur_heat)

      else if action = TurnHeatOn then
        if (not (pre cur_heat = On)) and (not (pre cur_door = Opened)) then
          (pre cur_door, On)
        else
          (pre cur_door, pre cur_heat)

      else if action = TurnHeatOff then
        if pre cur_heat = On then
          (pre cur_door, Off)
        else
          (pre cur_door, pre cur_heat)

      else
        (pre cur_door, pre cur_heat);

  --%MAIN;
  --%PROPERTY not (cur_door = Opened and cur_heat = On);
tel
