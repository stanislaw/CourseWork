-- I am building a cancer treatment machine. The machine can emit two types of
-- beams; for simplicity let’s just call them A and B. There are two different
-- plates that can be placed in front of the beam; let’s call them 1 and 2. When
-- you turn the machine on it always starts ups with beam set to A and plate set
-- to 1. That is the initial state.

-- For safety reasons we never want the machine to be at beam B and plate 2.
-- If this every happens a deadline dose of radiation will be emitted and it
-- will kill the patient.
-- But all of the other combinations of beams and plates are valid.
--
-- Method setBeam(str beamType)
-- If beamType = B and plate = 1
-- Set beam = B
-- Else Set beam = A
--
-- Method setPlate(int plateType)
-- If plateType = 2 and beam = A
-- Set plate = 2
-- Else Set plate = 1

type plate_t = subrange [1, 2] of int;
type beam_t = enum { A, B };

node setBeam(beam: beam_t; p: plate_t) returns (b: beam_t);
let
  b = A -> if beam = B and pre p = 1 then B else A;
tel

node setPlate(plate: plate_t; b: beam_t) returns (p: plate_t);
let
  p = 1 -> if plate = 2 and pre b = A then 2 else 1;
tel

node top (plate: plate_t; beam: beam_t) returns (p: plate_t; b: beam_t);
let
  b = setBeam(beam, p);
  p = setPlate(plate, b);

  --%MAIN;

  --%PROPERTY not (b = B and p = 2);
tel
